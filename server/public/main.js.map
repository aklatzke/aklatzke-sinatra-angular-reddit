{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/active-subreddit/active-subreddit.component.css","webpack:///./src/app/active-subreddit/active-subreddit.component.html","webpack:///./src/app/active-subreddit/active-subreddit.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/reddit.service.ts","webpack:///./src/app/thread/thread.component.css","webpack:///./src/app/thread/thread.component.html","webpack:///./src/app/thread/thread.component.ts","webpack:///./src/app/user.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".thread-list{\\n    padding-left: 0px;\\n    list-style-type: none;\\n}\\n\\n.thread-list li{\\n    margin-bottom: 10px;\\n    cursor: pointer;\\n}\"","module.exports = \"<h4>r/{{ activeSubName }}</h4>\\n\\n<ul class=\\\"thread-list\\\" *ngIf=\\\"activeSub.children\\\">\\n  <li *ngFor=\\\"let thread of activeSub.children\\\">\\n    <app-thread [data]=\\\"thread.data\\\"></app-thread>\\n  </li>\\n</ul> \\n \\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { RedditService } from \"../reddit.service\";\n\n@Component({\n  selector: 'app-active-subreddit',\n  templateUrl: './active-subreddit.component.html',\n  styleUrls: ['./active-subreddit.component.css']\n})\n\nexport class ActiveSubredditComponent implements OnInit {\n  @Input() activeSub : {\n    children : {\n      data: Object[],\n      type: String\n    }[]\n  };\n\n  @Input() activeSubName: String;\n\n  constructor(\n    private redditService: RedditService\n  ) { }\n\n  ngOnInit() {\n    console.log(this.activeSub)\n  }\n}\n","module.exports = \".nav-link{\\n    cursor: pointer;\\n}\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-2 pt-2\\\">\\n      <h5>Welcome {{activeUser}}</h5>\\n      <ul class='nav nav-pills flex-column'>\\n          <a class='nav-link' \\n              *ngFor=\\\"let subs of subreddits\\\" \\n              (click)=\\\"getSpecificSubreddit(subs.data.display_name)\\\"\\n              [class.active]=\\\"subs.data.display_name === activeSubName\\\"\\n          >\\n            {{ subs.data.display_name }}\\n          </a>\\n      </ul>\\n    </div>\\n    <div class=\\\"col-10 pl-5 pr-5 pt-2\\\" *ngIf=\\\"activeSub\\\">\\n      <app-active-subreddit [activeSub]=\\\"activeSub\\\" [activeSubName]=\\\"activeSubName\\\"></app-active-subreddit>\\n    </div>    \\n  </div>\\n</div> \"","import { Component } from '@angular/core';\nimport { UserService } from './user.service';\nimport { RedditService } from \"./reddit.service\";\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent {\n  title = 'app';\n  activeUser = null;\n  subreddits = [];\n  activeSub;\n  activeSubName;\n\n  constructor(\n    private userService : UserService,\n    private redditService : RedditService\n  ){}\n\n  ngOnInit(){\n    this.getUser()\n    this.getSubbredits()\n  }\n\n  getSubbredits() : void {\n    this.redditService.getSubbreddits().subscribe((response: Response) => {\n      this.subreddits = JSON.parse(response.toString()).data.children;\n    })\n  }\n\n  getSpecificSubreddit(name){\n    this.activeSubName = name;\n    this.activeSub = null;\n\n    this.redditService.getSubredditDefault(name).subscribe((response: Response) => {\n      this.activeSub = JSON.parse(response.toString()).data;\n    })\n  }\n\n  getUser() : void {\n    this.userService.getUser().subscribe((response: Response) => {\n      this.activeUser = response\n    })\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { ActiveSubredditComponent } from './active-subreddit/active-subreddit.component';\nimport { ThreadComponent } from './thread/thread.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ActiveSubredditComponent,\n    ThreadComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\n\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class RedditService {\n  private subredditUrl = \"http://localhost:9292/api/subreddits/\";\n  subreddits;\n  activeSubName;\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  getSubbreddits() {\n    return this.http.get(this.subredditUrl)\n  }\n\n  getSubredditDefault(sub){\n    this.activeSubName = sub;\n\n    return this.http.get(this.subredditUrl + `${sub}/hot`)\n  }\n\n  getActiveSubName(){\n    return this.activeSubName;\n  }\n}\n","module.exports = \"\"","module.exports = \"<h6><a (click)=\\\"getThread(data.permalink)\\\">{{ data.title }}</a></h6>\\n   \"","import { Component, OnInit, Input } from '@angular/core';\nimport { RedditService } from '../reddit.service';\n\n@Component({\n  selector: 'app-thread',\n  templateUrl: './thread.component.html',\n  styleUrls: ['./thread.component.css']\n})\nexport class ThreadComponent implements OnInit {\n  @Input() data: {\n    title: String,\n    permalink: String\n  }\n\n  constructor() { }\n\n  ngOnInit() {\n    console.log(this.data)\n  }\n\n  getThread(permalink){\n\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class UserService {\n  private userUrl = \"http://localhost:9292/api/user/\";\n  user;\n\n  constructor(\n    private http: HttpClient\n  ) { }\n \n  getUser (){\n    return this.http.get(this.userUrl)\n  }  \n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}