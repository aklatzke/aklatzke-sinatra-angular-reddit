{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/active-subreddit/active-subreddit.component.css","webpack:///./src/app/active-subreddit/active-subreddit.component.html","webpack:///./src/app/active-subreddit/active-subreddit.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/reddit.service.ts","webpack:///./src/app/subreddit-search/subreddit-search.component.css","webpack:///./src/app/subreddit-search/subreddit-search.component.html","webpack:///./src/app/subreddit-search/subreddit-search.component.ts","webpack:///./src/app/thread-detail-comment/thread-detail-comment.component.css","webpack:///./src/app/thread-detail-comment/thread-detail-comment.component.html","webpack:///./src/app/thread-detail-comment/thread-detail-comment.component.ts","webpack:///./src/app/thread-details/thread-details.component.css","webpack:///./src/app/thread-details/thread-details.component.html","webpack:///./src/app/thread-details/thread-details.component.ts","webpack:///./src/app/thread/thread.component.css","webpack:///./src/app/thread/thread.component.html","webpack:///./src/app/thread/thread.component.ts","webpack:///./src/app/user.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,+BAA+B,wBAAwB,4BAA4B,GAAG,oBAAoB,0BAA0B,sBAAsB,GAAG,C;;;;;;;;;;;ACA7J,0BAA0B,iBAAiB,wd;;;;;;;;;;;;;;;;;;;;;;;;;ACAc;AACP;AAQlD;IAYE,kCACU,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;IAClC,CAAC;IAEL,2CAAQ,GAAR;QACE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;IAC7B,CAAC;IAED,4CAAS,GAAT;QAAA,iBAEC;QADC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,kBAAQ,IAAI,YAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC;IACxF,CAAC;IAED,8CAAW,GAAX;QAAA,iBAEC;QADC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,kBAAQ,IAAI,YAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC;IAC1F,CAAC;IAzBQ;QAAR,2DAAK,EAAE;;+DAKN;IAEO;QAAR,2DAAK,EAAE;;6DAAS;IACR;QAAR,2DAAK,EAAE;;mEAAuB;IACtB;QAAR,2DAAK,EAAE;;kEAAuB;IAVpB,wBAAwB;QANpC,+DAAS,CAAC;YACT,QAAQ,EAAE,sBAAsB;;;SAGjC,CAAC;yCAeyB,6DAAa;OAb3B,wBAAwB,CA2BpC;IAAD,+BAAC;CAAA;AA3BoC;;;;;;;;;;;;ACTrC,4BAA4B,sBAAsB,GAAG,C;;;;;;;;;;;ACArD,8HAA8H,YAAY,wdAAwd,0BAA0B,wX;;;;;;;;;;;;;;;;;;;;;;;;;;ACAllB;AACG;AACI;AASjD;IAeE,sBACU,WAAyB,EACzB,aAA6B;QAD7B,gBAAW,GAAX,WAAW,CAAc;QACzB,kBAAa,GAAb,aAAa,CAAgB;QAhBvC,UAAK,GAAG,KAAK,CAAC;QACd,eAAU,GAAG,IAAI,CAAC;QAClB,eAAU,GAAG,CAAC;gBACZ,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE;oBACJ,YAAY,EAAE,MAAM;iBACrB;aACF,CAAC,CAAC;QAGH,uBAAkB,GAAa,KAAK,CAAC;IAOnC,CAAC;IAEH,+BAAQ,GAAR;QACE,IAAI,CAAC,OAAO,EAAE;QACd,IAAI,CAAC,aAAa,EAAE;QAEpB,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IAED,oCAAa,GAAb;QAAA,iBAMC;QALC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC,UAAC,QAAkB;YAC/D,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;gBACxE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;YAC/E,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;IAED,2CAAoB,GAApB,UAAqB,IAAI;QAAzB,iBAQC;QAPC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,QAAkB;YACxE,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC;YACtD,KAAI,CAAC,kBAAkB,GAAG,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAG,IAAI,UAAG,CAAC,IAAI,CAAC,YAAY,KAAK,IAAI,EAA9B,CAA8B,CAAC,CAAC;QACxF,CAAC,CAAC;IACJ,CAAC;IAED,8BAAO,GAAP;QAAA,iBAIC;QAHC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,UAAC,QAAkB;YACtD,KAAI,CAAC,UAAU,GAAG,QAAQ;QAC5B,CAAC,CAAC;IACJ,CAAC;IAlDU,YAAY;QANxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAkBwB,yDAAW;YACT,6DAAa;OAjB5B,YAAY,CAmDxB;IAAD,mBAAC;CAAA;AAnDwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXiC;AACjB;AACe;AACX;AACE;AAC0C;AAC7B;AAC6B;AACN;AACoB;AAoBvG;IAAA;IAAyB,CAAC;IAAb,SAAS;QAlBrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,qGAAwB;gBACxB,wEAAe;gBACf,qGAAwB;gBACxB,+FAAsB;gBACtB,mHAA4B;aAC7B;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,qEAAgB;gBAChB,0DAAW;aACZ;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OAEW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BqB;AACoB;AAM/D;IAKE,uBACU,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QALlB,iBAAY,GAAG,uCAAuC,CAAC;IAM3D,CAAC;IAEL,sCAAc,GAAd;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;IACzC,CAAC;IAED,2CAAmB,GAAnB,UAAoB,GAAG;QACrB,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;QAEzB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,IAAM,GAAG,SAAM,EAAC;IACxD,CAAC;IAED,wCAAgB,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED,iCAAS,GAAT,UAAU,IAAI;QACZ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAI,IAAI,CAAC,YAAY,eAAU,IAAM,CAAC,CAAC;IAC7D,CAAC;IAED,iCAAS,GAAT,UAAU,IAAI;QACZ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAI,IAAI,CAAC,YAAY,kBAAa,IAAM,CAAC,CAAC;IAChE,CAAC;IAED,mCAAW,GAAX,UAAY,IAAI;QACd,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAI,IAAI,CAAC,YAAY,oBAAe,IAAM,CAAC,CAAC;IAClE,CAAC;IAED,wCAAgB,GAAhB,UAAiB,GAAG,EAAE,EAAE;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAG,IAAI,CAAC,YAAY,GAAG,GAAG,SAAI,EAAI,CAAC,CAAC;IAC3D,CAAC;IArCU,aAAa;QAJzB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAQgB,+DAAU;OANf,aAAa,CAsCzB;IAAD,oBAAC;CAAA;AAtCyB;;;;;;;;;;;;ACP1B,kCAAkC,4BAA4B,uBAAuB,wBAAwB,GAAG,mBAAmB,sBAAsB,wBAAwB,uBAAuB,0BAA0B,GAAG,yBAAyB,gCAAgC,+BAA+B,yBAAyB,GAAG,UAAU,mBAAmB,sBAAsB,sBAAsB,GAAG,K;;;;;;;;;;;ACAra,stBAAstB,UAAU,2C;;;;;;;;;;;;;;;;;;;;;;;;;ACAvqB;AACP;AAQlD;IAME,kCACU,aAA6B;QAA7B,kBAAa,GAAb,aAAa,CAAgB;IACnC,CAAC;IAEL,2CAAQ,GAAR,cAAY,CAAC;IAEb,4CAAS,GAAT;QAAA,iBAIC;QAHC,IAAI,aAAa,GAAW,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,UAAC,QAAQ;YAC3F,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC;IAED,+CAAY,GAAZ;QACE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC5B,CAAC;IAED,+CAAY,GAAZ,UAAa,OAAO;QAClB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;IACzB,CAAC;IAvBQ;QAAR,2DAAK,EAAE;;+DAAe;IADZ,wBAAwB;QANpC,+DAAS,CAAC;YACT,QAAQ,EAAE,sBAAsB;;;SAGjC,CAAC;yCAS0B,6DAAa;OAP5B,wBAAwB,CAyBpC;IAAD,+BAAC;CAAA;AAzBoC;;;;;;;;;;;;ACTrC,mB;;;;;;;;;;;ACAA,8D;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAOlD;IAEE;IAAgB,CAAC;IAEjB,+CAAQ,GAAR;IACA,CAAC;IALU,4BAA4B;QALxC,+DAAS,CAAC;YACT,QAAQ,EAAE,2BAA2B;;;SAGtC,CAAC;;OACW,4BAA4B,CAOxC;IAAD,mCAAC;CAAA;AAPwC;;;;;;;;;;;;ACPzC,kCAAkC,sBAAsB,aAAa,gBAAgB,eAAe,gBAAgB,iDAAiD,yBAAyB,GAAG,UAAU,kBAAkB,wBAAwB,GAAG,iBAAiB,sBAAsB,wBAAwB,GAAG,iBAAiB,gBAAgB,GAAG,G;;;;;;;;;;;ACA9V,+KAA+K,uBAAuB,2WAA2W,8BAA8B,8W;;;;;;;;;;;;;;;;;;;;;;;;;ACAthB;AACP;AAMlD;IAaE,gCACU,aAA6B;QAA7B,kBAAa,GAAb,aAAa,CAAgB;IACnC,CAAC;IAEL,yCAAQ,GAAR;QAAA,iBASC;QARC,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,kBAAQ;YACvE,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEhD,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAE5D,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC;YAChC,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;QACjD,CAAC,CAAC;IACJ,CAAC;IAzBQ;QAAR,2DAAK,EAAE;kCAAM,MAAM;sDAAC;IACZ;QAAR,2DAAK,EAAE;kCAAO,MAAM;uDAAC;IACb;QAAR,2DAAK,EAAE;;yDAAoB;IAHjB,sBAAsB;QALlC,+DAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;;;SAG/B,CAAC;yCAe0B,6DAAa;OAd5B,sBAAsB,CA2BlC;IAAD,6BAAC;CAAA;AA3BkC;;;;;;;;;;;;ACPnC,wBAAwB,yBAAyB,mBAAmB,GAAG,MAAM,sBAAsB,wBAAwB,yBAAyB,gCAAgC,oBAAoB,GAAG,C;;;;;;;;;;;ACA3M,wTAAwT,cAAc,iCAAiC,mBAAmB,mQ;;;;;;;;;;;;;;;;;;;;;;;;ACAjU;AAQzD;IAcE;QAJA,gBAAW,GAAY,KAAK,CAAC;QAC7B,kBAAa,GAAY,KAAK,CAAC;IAGf,CAAC;IAEjB,kCAAQ,GAAR;QACE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;IAED,qCAAW,GAAX;QACE,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED,oCAAU,GAAV;QACE,IAAI,CAAC,WAAW,GAAG,CAAE,IAAI,CAAC,WAAW,CAAC;IACxC,CAAC;IAED,mCAAS,GAAT;QACE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC5B,CAAC;IA7BQ;QAAR,2DAAK,EAAE;;iDAOP;IARU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;;OACW,eAAe,CA+B3B;IAAD,sBAAC;CAAA;AA/B2B;;;;;;;;;;;;;;;;;;;;;;;;;;ACRe;AACoB;AAM/D;IAIE,qBACU,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAJlB,YAAO,GAAG,iCAAiC,CAAC;IAKhD,CAAC;IAEL,6BAAO,GAAP;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IACpC,CAAC;IAVU,WAAW;QAJvB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAOgB,+DAAU;OALf,WAAW,CAWvB;IAAD,kBAAC;CAAA;AAXuB;;;;;;;;;;;;;;ACPxB;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;ACdpB;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".thread-list{\\n    padding-left: 0px;\\n    list-style-type: none;\\n}\\n\\n.thread-list li{\\n    margin-bottom: 10px;\\n    cursor: pointer;\\n}\"","module.exports = \"<h4>r/{{ activeSubName }}</h4>\\n<hr />\\n<div class='subredditActions'>\\n  <button *ngIf=\\\"isSubscribed\\\" class='btn btn-primary btn-sm' (click)=\\\"unsubscribe()\\\">Unsubscribe</button>\\n  <button *ngIf=\\\"! isSubscribed\\\" class='btn btn-primary btn-sm' (click)=\\\"subscribe()\\\">Subscribe</button>\\n</div>\\n<hr />\\n\\n<ul class=\\\"thread-list\\\" *ngIf=\\\"activeSub.children\\\">\\n  <li *ngFor=\\\"let thread of activeSub.children\\\">\\n    <app-thread [data]=\\\"thread.data\\\"></app-thread>\\n  </li>\\n</ul> \\n \\n \"","import { Component, OnInit, Input } from '@angular/core';\nimport { RedditService } from \"../reddit.service\";\n\n@Component({\n  selector: 'app-active-subreddit',\n  templateUrl: './active-subreddit.component.html',\n  styleUrls: ['./active-subreddit.component.css']\n})\n\nexport class ActiveSubredditComponent implements OnInit {\n  @Input() activeSub : {\n    children : {\n      data: object[],\n      type: string\n    }[]\n  };\n\n  @Input() refresh;\n  @Input() activeSubName: string;\n  @Input() isSubscribed: boolean;\n\n  constructor(\n    private redditService: RedditService\n  ) { }\n\n  ngOnInit() {\n    console.log(this.activeSub)\n  }\n\n  subscribe(){\n    this.redditService.subscribe(this.activeSubName).subscribe(response => this.refresh())\n  }\n\n  unsubscribe(){\n    this.redditService.unsubscribe(this.activeSubName).subscribe(response => this.refresh())\n  }\n}\n","module.exports = \".nav-link{\\n    cursor: pointer;\\n}\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-2 pt-2\\\">\\n      <h5>Welcome {{activeUser}}</h5> \\n      <app-subreddit-search\\n        [setActive]=\\\"passableGetSpecificSubreddit\\\"\\n      ></app-subreddit-search>\\n      <hr /> \\n      <h6>Your Subreddits</h6>\\n      <ul class='nav nav-pills flex-column'>\\n          <a class='nav-link' \\n              *ngFor=\\\"let subs of subreddits\\\" \\n              (click)=\\\"getSpecificSubreddit(subs.data.display_name)\\\"\\n              [class.active]=\\\"subs.data.display_name === activeSubName\\\"\\n          >\\n            {{ subs.data.display_name }}\\n          </a>\\n      </ul>\\n    </div> \\n    <div class=\\\"col-10 pl-5 pr-5 pt-2\\\" *ngIf=\\\"activeSub\\\">\\n      <app-active-subreddit \\n        [activeSub]=\\\"activeSub\\\" \\n        [activeSubName]=\\\"activeSubName\\\"\\n        [isSubscribed]=\\\"subscribedToActive\\\"\\n        [refresh]=\\\"passableRefresh\\\"\\n      >\\n      </app-active-subreddit>\\n    </div>    \\n  </div>\\n</div> \"","import { Component } from '@angular/core';\nimport { UserService } from './user.service';\nimport { RedditService } from \"./reddit.service\";\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent {\n  title = 'app';\n  activeUser = null;\n  subreddits = [{\n    type: String,\n    data: {\n      display_name: String\n    }\n  }];\n  activeSub;\n  activeSubName : String;\n  subscribedToActive : boolean = false;\n  passableGetSpecificSubreddit : any;\n  passableRefresh : any;\n\n  constructor(\n    private userService : UserService,\n    private redditService : RedditService\n  ){}\n\n  ngOnInit(){\n    this.getUser()\n    this.getSubbredits()\n\n    this.passableGetSpecificSubreddit = this.getSpecificSubreddit.bind(this);\n    this.passableRefresh = this.getSubbredits.bind(this);\n  }\n\n  getSubbredits() : void {\n    this.redditService.getSubbreddits().subscribe((response: Response) => {\n      this.subreddits = JSON.parse(response.toString()).data.children.sort((a, b) => {\n        return a.data.display_name.toLowerCase() > b.data.display_name.toLowerCase();\n      });\n    })\n  }\n\n  getSpecificSubreddit(name){\n    this.activeSubName = name;\n    this.activeSub = null;\n\n    this.redditService.getSubredditDefault(name).subscribe((response: Response) => {\n      this.activeSub = JSON.parse(response.toString()).data;\n      this.subscribedToActive = this.subreddits.some(sub => sub.data.display_name === name);\n    })\n  }\n\n  getUser() : void {\n    this.userService.getUser().subscribe((response: Response) => {\n      this.activeUser = response\n    })\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { ActiveSubredditComponent } from './active-subreddit/active-subreddit.component';\nimport { ThreadComponent } from './thread/thread.component';\nimport { SubredditSearchComponent } from './subreddit-search/subreddit-search.component';\nimport { ThreadDetailsComponent } from './thread-details/thread-details.component';\nimport { ThreadDetailCommentComponent } from './thread-detail-comment/thread-detail-comment.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ActiveSubredditComponent,\n    ThreadComponent,\n    SubredditSearchComponent,\n    ThreadDetailsComponent,\n    ThreadDetailCommentComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\n\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class RedditService {\n  private subredditUrl = \"http://localhost:9292/api/subreddits/\";\n  subreddits;\n  activeSubName;\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  getSubbreddits() {\n    return this.http.get(this.subredditUrl)\n  }\n\n  getSubredditDefault(sub){\n    this.activeSubName = sub;\n\n    return this.http.get(this.subredditUrl + `${sub}/hot`)\n  }\n\n  getActiveSubName(){\n    return this.activeSubName;\n  }\n\n  searchFor(name){\n    return this.http.get(`${this.subredditUrl}search/${name}`);\n  }\n\n  subscribe(name){\n    return this.http.get(`${this.subredditUrl}subscribe/${name}`);\n  }\n\n  unsubscribe(name){\n    return this.http.get(`${this.subredditUrl}unsubscribe/${name}`);\n  }\n\n  getThreadDetails(sub, id){\n    return this.http.get(`${this.subredditUrl}${sub}/${id}`);\n  }\n}\n","module.exports = \".search-results{\\n    list-style-type: none;\\n    margin-left: 0px;\\n    padding-left: 0px;\\n}\\n\\n.search-result{\\n    cursor: pointer;\\n    padding-left: 6px;\\n    padding-top: 2px;\\n    padding-bottom: 2px;\\n}\\n\\n.search-result:hover{\\n    background-color: #cdcdcd;\\n    transition: all .2s ease;\\n    border-radius: 4px;\\n}\\n\\n.icon{\\n    height: 15px;\\n    cursor: pointer;\\n    margin-top: 2px;\\n}\\n\\n\"","module.exports = \"<div>\\n  <form class='form-inline mb-2'>\\n    <div class=\\\"input-group\\\">\\n      <input [(ngModel)]=\\\"searchTerm\\\" type=\\\"text\\\" placeholder=\\\"/r/query\\\" class='form-control' name=\\\"searchTerm\\\" />\\n      <div class=\\\"input-group-append\\\">\\n        <button (click)=\\\"runSearch()\\\" class='btn btn-primary'>Search</button>\\n      </div>\\n    </div>\\n  </form>\\n</div>\\n\\n<div *ngIf=\\\"searchResults\\\">\\n  <h6>Search Results <img src=\\\"/assets/svg/circle-x.svg\\\" class='icon float-right' alt=\\\"\\\" (click)=\\\"closeResults()\\\"></h6>\\n  <ul class=\\\"search-results\\\">\\n    <li \\n      class='search-result' \\n      *ngFor=\\\"let result of searchResults\\\"\\n      (click)=\\\"setActiveSub(result)\\\"\\n    >\\n      <small>{{ result }}</small>\\n    </li> \\n  </ul> \\n</div>\\n\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { RedditService } from \"../reddit.service\";\n\n@Component({\n  selector: 'app-subreddit-search',\n  templateUrl: './subreddit-search.component.html',\n  styleUrls: ['./subreddit-search.component.css']\n})\n\nexport class SubredditSearchComponent implements OnInit {\n  @Input() setActive: any\n\n  searchTerm: string;\n  searchResults : string[];\n\n  constructor(\n    private redditService : RedditService\n  ) { }\n \n  ngOnInit() {}\n\n  runSearch(){\n    let searchResults: object = this.redditService.searchFor(this.searchTerm).subscribe((response) => {\n      this.searchResults = JSON.parse(response.toString()).names;\n    });\n  } \n\n  closeResults(){\n    this.searchResults = null;\n  }\n\n  setActiveSub(subName){\n    this.setActive(subName)\n  }\n}\n","module.exports = \"\"","module.exports = \"<p>\\n  thread-detail-comment works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-thread-detail-comment',\n  templateUrl: './thread-detail-comment.component.html',\n  styleUrls: ['./thread-detail-comment.component.css']\n})\nexport class ThreadDetailCommentComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".thread-overlay{\\n    position: fixed;\\n    top: 0;\\n    bottom: 0;\\n    right: 0;\\n    left: 10%;\\n    background-color: rgba(255, 255, 255, .95);\\n    overflow-y: scroll;\\n}\\n\\n.icon{\\n    width: 15px;\\n    margin-right: 4px;\\n}\\n\\n.thread-text{\\n    font-size: 14px;\\n    line-height: 22px;\\n}\\n\\n.arrow-icon {\\n  width: 24px;\\n}\\n\"","module.exports = \"<div class='thread-overlay' *ngIf=\\\"threadDetails\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row pt-4\\\">\\n      <div class=\\\"col-12\\\">\\n        <h3>{{ threadDetails.title }}</h3>\\n      </div>\\n      <div class=\\\"col-12\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-1\\\">\\n            <img src=\\\"/assets/svg/arrow-thick-left.svg\\\" class='arrow-icon icon' (click)=\\\"close()\\\"/>\\n          </div>\\n          <div class=\\\"col-1\\\">\\n            <img src=\\\"/assets/svg/comment-square.svg\\\" class='comment-icon icon' alt=\\\"\\\"> {{ threadDetails.num_comments }}\\n          </div>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"col-12\\\">\\n        <hr />\\n        <p class='thread-text' [innerHTML]=\\\"threadDetails.selftext_html\\\"></p>\\n      </div>\\n    </div> \\n \\n    <div class=\\\"row\\\" *ngFor=\\\"let comment of comments\\\">\\n      <app-thread-detail-comment></app-thread-detail-comment>\\n    </div>\\n  </div>  \\n</div> \\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { RedditService } from \"../reddit.service\";\n@Component({\n  selector: 'app-thread-details',\n  templateUrl: './thread-details.component.html',\n  styleUrls: ['./thread-details.component.css']\n})\nexport class ThreadDetailsComponent implements OnInit {\n  @Input() id : String;\n  @Input() sub : String;\n  @Input() close : () => void;\n\n  private fullData : Object;\n  threadDetails: {\n    title : String,\n    num_comments: Number,\n    selftext_html: String\n  };\n  comments: Object[];\n\n  constructor(\n    private redditService : RedditService\n  ) { }\n\n  ngOnInit() {\n    this.redditService.getThreadDetails(this.sub, this.id).subscribe(response => {\n      this.fullData = JSON.parse(response.toString());\n\n      this.threadDetails = this.fullData[0].data.children[0].data;\n\n      console.log(this.threadDetails);\n      this.comments = this.fullData[1].data.children;\n    })\n  }\n}\n","module.exports = \".icon{\\n    margin-right: 10px;\\n    height: 15px;\\n}\\n\\np{\\n    font-size: 14px;\\n    line-height: 22px;\\n    font-weight: light;\\n    background-color: #efefef;\\n    padding: 12px;\\n}\"","module.exports = \"<h6>\\n  <img *ngIf=\\\"! textVisible\\\" class='icon expand-icon' src=\\\"/assets/svg/arrow-bottom.svg\\\" alt=\\\"\\\" (click)=\\\"toggleText()\\\" />\\n  <img *ngIf=\\\"textVisible\\\" class='icon expand-icon' src=\\\"/assets/svg/arrow-top.svg\\\" alt=\\\"\\\" (click)=\\\"toggleText()\\\" />\\n\\n<a (click)=\\\"getThread()\\\">{{ data.title }}\\n  <span class='float-right'>({{data.num_comments}})</span>\\n</a>\\n\\n</h6>\\n<p *ngIf=\\\"textVisible\\\" [innerHTML]=\\\"data.selftext_html\\\"></p>       \\n\\n<div *ngIf=\\\"threadVisible\\\">\\n    <app-thread-details [id]=\\\"data.id\\\" [sub]=\\\"data.subreddit\\\" [close]=\\\"passableClose\\\" ></app-thread-details>\\n</div>     \"","import { Component, OnInit, Input } from '@angular/core';\nimport { RedditService } from '../reddit.service';\n\n@Component({\n  selector: 'app-thread',\n  templateUrl: './thread.component.html',\n  styleUrls: ['./thread.component.css']\n})\nexport class ThreadComponent implements OnInit {\n  @Input() data: {\n    title: String,\n    permalink: String,\n    selftext_html: String,\n    id : String,\n    subreddit: String,\n    num_comments: Number\n  }\n\n  textVisible: boolean = false;\n  threadVisible: boolean = false;\n  passableClose: any;\n\n  constructor() { }\n\n  ngOnInit() {\n    this.passableClose = this.closeThread.bind(this);\n  }\n\n  closeThread(){\n    this.threadVisible = false;\n  }\n\n  toggleText(){\n    this.textVisible = ! this.textVisible;\n  }\n\n  getThread(){\n    this.threadVisible = true;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class UserService {\n  private userUrl = \"http://localhost:9292/api/user/\";\n  user;\n\n  constructor(\n    private http: HttpClient\n  ) { }\n \n  getUser (){\n    return this.http.get(this.userUrl)\n  }  \n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}